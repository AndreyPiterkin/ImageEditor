import org.junit.Before;
import org.junit.Test;

import java.awt.*;
import java.awt.image.BufferedImage;

import cs3500.imageprocessor.model.BasicImage;
import cs3500.imageprocessor.model.ImageState;
import cs3500.imageprocessor.model.RGBAPixel;
import cs3500.imageprocessor.operations.Sharpen;

import static org.junit.Assert.assertEquals;

/**
 * Tests for sharpen.
 */
public class SharpenTest {

  Sharpen sharpen;
  private ImageState image2x2;
  private ImageState image5x5;

  @Before
  public void initData() {
    this.sharpen = new Sharpen();
    RGBAPixel[][] initPixels2x2 = {
        {new RGBAPixel(16),
            new RGBAPixel(32)},
        {new RGBAPixel(48),
            new RGBAPixel(64)}};
    RGBAPixel[][] initPixels5x5 = {
        {new RGBAPixel(8), new RGBAPixel(16), new RGBAPixel(24), new RGBAPixel(32),
            new RGBAPixel(40)},
        {new RGBAPixel(8), new RGBAPixel(16), new RGBAPixel(24), new RGBAPixel(32),
            new RGBAPixel(40)},
        {new RGBAPixel(8), new RGBAPixel(16), new RGBAPixel(24), new RGBAPixel(32),
            new RGBAPixel(40)},
        {new RGBAPixel(8), new RGBAPixel(16), new RGBAPixel(24), new RGBAPixel(32),
            new RGBAPixel(40)},
        {new RGBAPixel(8), new RGBAPixel(16), new RGBAPixel(24), new RGBAPixel(32),
            new RGBAPixel(40)}};

    BufferedImage img1 = new BufferedImage(2, 2, BufferedImage.TYPE_INT_RGB);
    for (int r = 0; r < initPixels2x2.length; r++) {
      for (int c = 0; c < initPixels2x2[r].length; c++) {
        RGBAPixel pixel = initPixels2x2[r][c];
        Color color = new Color(pixel.getRed(), pixel.getGreen(), pixel.getBlue());
        img1.setRGB(c, r, color.getRGB());
      }
    }

    BufferedImage img2 = new BufferedImage(5, 5, BufferedImage.TYPE_INT_RGB);
    for (int r = 0; r < initPixels5x5.length; r++) {
      for (int c = 0; c < initPixels5x5[r].length; c++) {
        RGBAPixel pixel = initPixels5x5[r][c];
        Color color = new Color(pixel.getRed(), pixel.getGreen(), pixel.getBlue());
        img2.setRGB(c, r, color.getRGB());
      }
    }

    this.image2x2 = new BasicImage(img1);
    this.image5x5 = new BasicImage(img2);
  }

  @Test
  public void testApply() {
    assertEquals(new RGBAPixel(52), this.sharpen.apply(this.image2x2, 0, 0));
    assertEquals(new RGBAPixel(64), this.sharpen.apply(this.image2x2, 0, 1));
    assertEquals(new RGBAPixel(76), this.sharpen.apply(this.image2x2, 1, 0));
    assertEquals(new RGBAPixel(88), this.sharpen.apply(this.image2x2, 1, 1));

    assertEquals(new RGBAPixel(6), this.sharpen.apply(this.image5x5, 0, 0));
    assertEquals(new RGBAPixel(18), this.sharpen.apply(this.image5x5, 0, 1));
    assertEquals(new RGBAPixel(27), this.sharpen.apply(this.image5x5, 0, 2));
    assertEquals(new RGBAPixel(54), this.sharpen.apply(this.image5x5, 0, 3));
    assertEquals(new RGBAPixel(48), this.sharpen.apply(this.image5x5, 0, 4));

    assertEquals(new RGBAPixel(9), this.sharpen.apply(this.image5x5, 1, 0));
    assertEquals(new RGBAPixel(26), this.sharpen.apply(this.image5x5, 1, 1));
    assertEquals(new RGBAPixel(39), this.sharpen.apply(this.image5x5, 1, 2));
    assertEquals(new RGBAPixel(76), this.sharpen.apply(this.image5x5, 1, 3));
    assertEquals(new RGBAPixel(63), this.sharpen.apply(this.image5x5, 1, 4));

    assertEquals(new RGBAPixel(3), this.sharpen.apply(this.image5x5, 2, 0));
    assertEquals(new RGBAPixel(16), this.sharpen.apply(this.image5x5, 2, 1));
    assertEquals(new RGBAPixel(24), this.sharpen.apply(this.image5x5, 2, 2));
    assertEquals(new RGBAPixel(62), this.sharpen.apply(this.image5x5, 2, 3));
    assertEquals(new RGBAPixel(51), this.sharpen.apply(this.image5x5, 2, 4));

    assertEquals(new RGBAPixel(9), this.sharpen.apply(this.image5x5, 3, 0));
    assertEquals(new RGBAPixel(26), this.sharpen.apply(this.image5x5, 3, 1));
    assertEquals(new RGBAPixel(39), this.sharpen.apply(this.image5x5, 3, 2));
    assertEquals(new RGBAPixel(76), this.sharpen.apply(this.image5x5, 3, 3));
    assertEquals(new RGBAPixel(63), this.sharpen.apply(this.image5x5, 3, 4));

    assertEquals(new RGBAPixel(6), this.sharpen.apply(this.image5x5, 4, 0));
    assertEquals(new RGBAPixel(18), this.sharpen.apply(this.image5x5, 4, 1));
    assertEquals(new RGBAPixel(27), this.sharpen.apply(this.image5x5, 4, 2));
    assertEquals(new RGBAPixel(54), this.sharpen.apply(this.image5x5, 4, 3));
    assertEquals(new RGBAPixel(48), this.sharpen.apply(this.image5x5, 4, 4));
  }
}
